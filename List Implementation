#include<iostream>
using namespace std;

template<typename T>
struct Node
{
	T data;
	Node* next;
};

template<typename T>
class List{
private:
	Node<T>* _front;
	Node<T>* _back;
	int size;
public:
	List();
	T& front() const;
	T& back() const;
	bool empty() const;
	size_t get_Size() const;
	void push_front(const T&);
	void pop_front();
	void push_back(const T&);
	void pop_back();
};

template<typename T>
List<T>::List()
{
	_front = NULL;
	_back = NULL;
	next = NULL;
	size = 0;
}

template<typename T>
T& List<T>::front() const
{
	return _front->data;
}

template<typename T>
T& List<T>::back() const
{
	return _back->data;
}

template<typename T>
bool List<T>::empty() const
{
	return _front == NULL;
}

 template<typename T>
size_t List<T>::get_Size() const
{
	return size;
} 

template<typename T>
void List<T>::push_front(const T& el)
{
	Node* newElem = new Node;
	newElem->data = el;
	newElem->next = NULL;
	if (empty())
	{
		_front = _back = newElem;
	}
	else
	{
		newElem->next = _front;
	}
	size++;
}

template<typename T>
void List<T>::pop_front()
{
	if (!empty())
	{
		Node* current = _front->next;
		delete _front;
		_front = current;
		size--;
	}
}

template<typename T>
void List<T>::push_back(const T& el)
{
	Node<T>* newElem = new Node;
	newElem->data = el;
	newElem->next = NULL;
	if (empty())
	{
		_front = _back = newElem;
	}
	else
	{
		_back->next = newElem;
		_back = newElem;
	}

	size++;
}

template<typename T>
void List<T>::pop_back()
{
	Node<T>* current = _front;
	while (current->next != _back)
	{
		current = current->next;
	}
	delete current->next;
	_back = current;
	_back->next = NULL;
	size--;
}
